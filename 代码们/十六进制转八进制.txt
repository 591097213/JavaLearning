//十六进制转八进制
//允许输入100000位的十六进制数
import java.io.BufferedInputStream;
import java.math.BigInteger;
import java.util.Scanner;

//解法一：
public class Main {
	
	public static void main(String[] args)
	{
	
		Scanner sc=new Scanner(new BufferedInputStream(System.in));
		while(sc.hasNext())
		{
			int n=sc.nextInt();
			while(n-->0)//input
			{
				char[] re=new char[10000000];//储存结果。用String会影响效率
				int index=0;//re的下标
				String a=sc.next();
				char[] arr=a.toCharArray();//arr为储存16进制数的数组
				for(int i=arr.length-15;i>=0;i-=15)//从末尾开始，每次处理15位
				{
					long temp=0;
					for(int j=0;j<15;j++)//对每一位进行操作，将这15位数共60个2进制位按顺序存放在long temp中
					{//每15位只能从前向后读取，转化为8进制时再将二进制编码从后向前读取，再将最终的结果数组颠倒输出。没有其他读取方式能够避免最终的“颠倒”这一步骤
						//eg：ABC DEF 第一次读取DEF，颠倒后FED；第二次读取ABC，颠倒CBA；将CBA添加至FED：FEDCBA。
						temp<<=4;
						if(arr[i+j]>='0'&&arr[i+j]<='9')//每一位转化为4位二进制位
						{
							temp|=(arr[i+j]-'0');
						}
						else
						{
							temp|=(arr[i+j]-'A'+10);
						}
					}
					
					for(int j=0;j<20;j++)//每3个二进制位转化为8进制
					{
						re[index++]=(char)((temp&7L)+'0');
						temp>>>=3;
					}
				}
				
				if(arr.length%15!=0)//处理剩下的不足15位的部分
				{
					long temp=0;
					int time=arr.length%15;
					for(int i=0;i<time;i++)
					{
						temp<<=4;
						if(arr[i]>='0'&&arr[i]<='9')
						{
							temp|=(arr[i]-'0');
						}
						else
						{
							temp|=(arr[i]-'A'+10);
						}
					}
					int i=(time*4/3)+((time*4.0/3-time*4/3)==0?0:1);//当二进制编码不是3的倍数，不能每3个一组时，算出前补零后的位数
					for(;i>0;i--)
					{
						if(i>1||(i==1&&((temp&7L)!=0)/*当i==1时，即最后一位时，不能为0*/))//排除前置0的情况。前补零后的8进制数可能出现数前面带有一个“0”的情况
							re[index++]=(char)((temp&7L)+'0');
						temp>>=3;
					}
				}
				for(int i=index-1;i>=0;i--)//逆序输出
				{
					System.out.print(re[i]);
				}
				System.out.println();
			}
		}

		

	}

}

//解法二：
/*public class Main {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(new BufferedInputStream(System.in));
		while(sc.hasNext())
		{
			int k=sc.nextInt();
			while((k--)>0)
			{
				System.out.println(new BigInteger(sc.next(),16).toString(8));
			}
		}

	}

}*/